 写入模式、i插入之前、a插入之后、A行尾插入、I行首插入、o下行插入、O上行插入
x 删除光标后一个字符
d + ←→删除光标←→字符（d +3←）、dd删除一行（其实是剪切，p粘贴）
y+ ←→复制光标←→字符 （y+3←）
c 删除并进入写入模式、w 光标向下移动一个词、cw删除一个词并进入写入模式、b光标到上一个词 、ciw词中删除一个词并进入写入模式，yi
f 找词
/ 搜索、n下 N上
【y i c d f 】
esc 回到正常模式
：w保存
：q退出vim
：source $MYVIMRC 刷新vim
jkhl上下左右
：split 上下分屏 、：vsplit 左右分屏 Q退出
~/.vim/vimrc
noremap a b a键改b键
map a b a键改b键
syntax on 打开高亮
set number 显示行号
set wildmenu ：命令补全
set hlsearch /搜索高亮
set incsearch 一面输入一面高亮
set ignorecase 忽略大小写43：35美化！

1.查看Git的使用方法 ： git

2.把当前文件夹变为一个git仓库 创建git仓库：git init

3.查看当前仓库文件变化情况：git status

4.添加修改：git add （可使用git add . 来添加当前仓库所有修改）

5.本次还没有提交的更改：git diff（比较工作区与暂存区的区别）

6.回滚，撤销提交操作：git reset <--hard>
	git reset <commit-hash-value>		回退到指定的commit哈希值
	commit哈希值查看方法：git log
				所有的操作记录：git reflog	

7.向Git提交自己身份（name）：git config --global user.name "xxx"

8.向Git提交自己身份（email）：git config --global user.email "xxx@xx.com"

9.向Git提交内容：git commit -m “xx” （xx为对提交的内容进行描述）

10.让Git不提交某些文件/忽略某些文件：创建文件 .gitignore 并在文件中添加文件名/文件夹名 即可 （若git已经开始追踪某些文件 则需要11）

11.让Git不再追踪某个/某些文件：git rm --cached xx （xx为文件名）
	====删除GitHub仓库的中某个文件夹
	====在上传项目到GitHub时,忘记忽略了某个文件夹target,就直接push上去了, 最后意识到了此问题,决定删除掉远程仓库中的Photo albums文件夹。但是在github上只能删除仓库,却无法删除文件夹或文件, 所以只能通过命令来解决，具体方法如下：
首先进入你的master文件夹下, Git Bash Here ,打开命令窗口

	$ git --help 帮助命令	（如想获取commit命令的帮助手册可以输入命令：git help commit）

	$ git pull origin master 将远程仓库里面的项目拉下来

	$ dir  查看有哪些文件夹

	===>>> $ git rm -r --cached Photo\ albums  删除Photo albums文件夹(这里的文件夹名有空格命令行需要用"\ "来拼接）
	（--cached参数是为了保留本地文件，只删除git仓库）

	$ git commit -m '删除了Photo albums文件夹t'  提交,添加操作说明


12.Git添加分支：git branch xx （xx为分支名）

13.Git切换分支：git checkout xx （xx为分支名）

14.合并分支：git merge xx（xx为分支名）

15.列出本地分支：git branch

16.删除分支:git branch -d xx (xx为分支名，-D强制删除)

17.添加远程仓库：git remote add origin xxx （xxx为远程地址）

18.设置本地分支追踪远程分支：git push --set-upstream

19.克隆仓库：git clone xxx（xxx为远程地址）===>>> git clone http://**** rename	(最后一个参数表示克隆出来的文件重新取的名字)

20. 忽略文件：.gitignore文件记录了忽略不加入git仓库的文件名称（可包含路径）,
	$ cat .gitignore
	*.[oa]
	*~
=====>>>第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。
	第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 
	此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 
	要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。
文件 .gitignore 的格式规范如下：
*所有空行或者以 ＃ 开头的行都会被 Git 忽略。
*可以使用标准的 glob 模式匹配。
*匹配模式可以以（/）开头防止递归。
*匹配模式可以以（/）结尾指定目录。
**要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。(++++  !lib.a ++++# track lib.a, even though you're ignoring .a files above)
