1. 操作系统做了什么

=可执行文件格式：win-pe格式 / Linux-elf格式
运行一个HelloWorld程序中的OS运行过程

=操作系统的三个作用：1资源的管理者；==> 硬件/软件资源，资源分配策略（静态分配策略，动态分配策略（多数）），资源的分配和回收 
	2向用户提供各种服务；
	3对硬件机器的扩展

============================================================================================
一、OS基本概念及原理




二、进程与线程的区别(ref: https://www.cnblogs.com/coder-programming/p/10595804.html)
====>>>  我们生活中有许许多多关于进程与线程的小栗子，比如：1.我们使用打开一个微信软件，这个时候就开启了一个进程，
当我们在微信里面进行各种操作（查看朋友圈，扫一扫...），这么多的操作就是线程。
所以我们可以说“进程”是包含“线程”的，“线程”是“进程”的一个子集。

进程（Process） 
====是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。 
在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。
是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。
程序是指令、数据及其组织形式的描述，进程是程序的实体。

线程（thread） 
====是操作系统能够进行运算调度的最小单位。
它被包含在进程之中，是进程中的实际运作单位。
一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。

sum:
进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；进程是===资源分配===的最小单位。
线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。线程是===程序执行===的最小单位。
	《进程是资源分配单位，线程是CPU调度单位》
=====》》》	线程 = 进程 - 共享资源
	线程优点：1.一个进程中可以同时存在多个线程。2.各个线程之间可以并发的执行。3.各个线程之间可以共享地址空间和文件等资源
	线程缺点：一个线程崩溃，会导致其所属进程的所有线程崩溃

同一进程的不同线程之间共享内存各文件资源，可以不通过内核直接进行通讯。


2.1 进程之间进行交互:
	通过TCP/IP的端口来实现(查百度)
2.2线程之间进行交互：
	线程的通信就比较简单，有一大块共享的内存，只要大家的指针是同一个就可以看到各自的内存(查百度)


++++++ 小结 ++++++
	1.进程要分配一大部分的内存，而线程只需要分配一部分栈就可以了.
	2.一个程序至少有一个进程,一个进程至少有一个线程.
	3.进程是资源分配的最小单位，线程是程序执行的最小单位。
	4.一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行.


通讯：
优点：	进程间通信的机制相对于线程更加安全。
	能够很容易的将一台机器上的多进程程序部署在不同的机器上（如果通信机制选取的是套接字的话）。
缺点：进程间通信较为复杂，速度相对线程间的通信更慢。
	启动进程的开销比线程大，使用的系统资源也更多。

C++11 引入多线程库: #include<thread>/ std::thread

一个简单的串行程序如下:
	#include<iostream>
	#include<thread>
	using namespace std;
	void function1(){
		cout<<"I'm function1"<<endl;
	}
	int main(){
		function1();
		system("pause");
		return 0;
	}
这是一个典型的单线程的单进程程序
任何程序都是一个进程，main()函数就是其中的主线程，单个线程都是顺序执行。

=======>>>>> 将上面的程序改造成多线程程序，让function_1()函数在另外的线程中执行：
#include<iostream>
#include<thread>
using namespace std;

void function1(){
	cout<<"I'm function1"<<endl;
}

int main(){
	std::thread t1(function1);
	//其他任务
	t1.join();
	system("pause");
	return 0;
}

||| 面试题
++++++++++++++++进程与线程的区别++++++++++++++++
进程是资源分配最小单位，线程是程序执行的最小单位；
进程有自己独立的地址空间，每启动一个进程，系统都会为其分配地址空间，建立数据表来维护代码段、堆栈段和数据段，线程没有独立的地址空间，它使用相同的地址空间共享数据；
CPU切换一个线程比切换进程花费小；
创建一个线程比进程开销小；
线程占用的资源要⽐进程少很多。
线程之间通信更方便，同一个进程下，线程共享全局变量，静态变量等数据，进程之间的通信需要以通信的方式（IPC）进行；（但多线程程序处理好同步与互斥是个难点）
多进程程序更安全，生命力更强，一个进程死掉不会对另一个进程造成影响（源于有独立的地址空间），多线程程序更不易维护，一个线程死掉，整个进程就死掉了（因为共享地址空间）；
进程对资源保护要求高，开销大，效率相对较低，线程资源保护要求不高，但开销小，效率高，可频繁切换；

===== 进程与程序的区别： 
进程的动态的，程序是静态的
进程是暂时的，程序是永久的
进程与程序的组成不同，进程包括程序，数据和进程控制块

进程控制块：（++PCB++，process control block）	
	操作系统管理控制进程运行所用的信息集合。
	操作系统用PCB来描述进程的基本情况以及运行变化的过程
	PCB是进程存在的唯一标识（每个进程在操作系统中都有一个对应的PCB）
	进程创建时生成PCB，进程中止时回收PCB，进程的组织管理通过对PCB的组织管理来实现。
\\\
PCB具体包含了哪些信息呢？
	进程标识信息，处理机现场保护，进程控制信息
	（PC,SP,寄存器，PID,UID，调度优先级，打开文件列表）
	控制信息：
	调度和状态信息（调度进程和处理机使用情况）
	进程间通信信息（进程间通信相关的标识）
	存储管理信息（指向进程映像存储空间数据结构）
	进程所用资源（进程使用的系统资源，如打开的文件等）
	有关数据结构连接信息（与PCB相关的进程队列）

PCB——Process Control Block
TCB——Thread Control Block
#系统线程——在内核中实现的线程

+++++ 用户线程与内核线程的对应关系：
	1.N个用户线程对应N个内核线程；
	2.N个用户线程对应一个内核线程；
	3.N个用户线程对应M个内核线程
@三种当中，现在的操作系统以第一种为主。




？？？？___句柄