1.制定cmake的最小版本：cmake_minimum_required(VERSION 3.10)


2.设置项目的名称：project(demo)


3.设置编译类型：add_executable(demo demo.cpp)	#生成可执行文件
		add_library(common STATIC util.cpp)	#生成静态库
		add_library(common SHARED util.cpp)	#生成动态库或共享库
	指定编译包含的源文件，明确指定包含哪些源文件：add_library(demo demo.cpp test.cpp util.cpp)


4.搜索所有的cpp文件：aux_source_directory(dir VAR)	===发现一个目录下所有的源文件并将列表存储在一个变量中
	aux_source_directory(. SRC_LIST)	#搜索当前目录下所有的.cpp文件
	add_library(demo ${SRC_LIST})	#将该文件夹下的demo.cpp存SRC_LIST变量中
4.1.自定义搜索规则
file(GLOB SRC_LIST "*.cpp" "protocol/*.cpp")
add_library(demo ${SRC_LIST})
# 或者
file(GLOB SRC_LIST "*.cpp")
file(GLOB SRC_PROTOCOL_LIST "protocol/*.cpp")
add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})
# 或者
aux_source_directory(. SRC_LIST)
aux_source_directory(protocol SRC_PROTOCOL_LIST)
add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})


5.查找指定的库文件：find_library(VAR name path) 查找到指定的预编译库，并将它的路径存储在变量中
===类似的命令还有===> find_file()、find_path()、find_program()、find_package()


6.设置包含的目录：include_directories( ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/include )
  ===> Linux下还可以使用如下方式设置包含目录：set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I${CMAKE_CURRENT_SOURCE_DIR}" )


7.设置链接库搜索目录：link_directories( ${CMAKE_CURRENT_SOURCE_DIR}/libs )
 ===> Linux下还可以使用如下方式设置包含目录：set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L${CMAKE_CURRENT_SOURCE_DIR}/libs")


8.设置target需要链接的库：target_link_libraries(#目标库 demo #目标库需要链接的库 ${log-lib})
指定链接动态库或静态库	=> target_link_libraries(demo libface.a)	#链接libface.a
			=> target_link_libraries(demo libface.so)	#链接libface.so
指定全路径：	target_link_libraries(demo ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.a)
		target_link_libraries(demo ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.so)
指定链接多个库：	target_link_libraries(demo 
				${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.a
				boost_system.a
				boost_thread
				pthread)


9.设置变量：	set直接设置变量的值 set(SRC_LIST main.cpp test.cpp)
				add_executable(demo ${SRC_LIST})
		set追加设置变量的值 set(SRC_LIST main.cpp)
				    set(SRC_LIST ${SRC_LIST} test.cpp)
				    add_executable(demo ${SRC_LIST})
		list追加或者删除变量的值 set(SRC_LIST main.cpp)
					 list(APPEND SRC_LIST test.cpp)
					 list(REMOVE_ITEM SRC_LIST main.cpp)


10.条件控制：参考网站中10. https://blog.csdn.net/afei__/article/details/81201039 


11.打印信息：	message(${PROJECT_SOURCE_DIR})
		message("build with debug mode")
		message(WARNING "this is warning message")
		message(FATAL_ERROR "this build has many error")	# FATAL_ERROR 会导致编译失败


12.包含其他cmake文件：	include(./common.cmke)	#指定包含文件的路径
			include(def)	# 在搜索路径中搜索def.cmake文件



三、常用变量
1. 预定义变量

PROJECT_SOURCE_DIR：工程的根目录
PROJECT_BINARY_DIR：运行 cmake 命令的目录，通常是 ${PROJECT_SOURCE_DIR}/build
PROJECT_NAME：返回通过 project 命令定义的项目名称
CMAKE_CURRENT_SOURCE_DIR：当前处理的 CMakeLists.txt 所在的路径
CMAKE_CURRENT_BINARY_DIR：target 编译目录
CMAKE_CURRENT_LIST_DIR：CMakeLists.txt 的完整路径
CMAKE_CURRENT_LIST_LINE：当前所在的行
CMAKE_MODULE_PATH：定义自己的 cmake 模块所在的路径，SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)，然后可以用INCLUDE命令来调用自己的模块
EXECUTABLE_OUTPUT_PATH：重新定义目标二进制可执行文件的存放位置
LIBRARY_OUTPUT_PATH：重新定义目标链接库文件的存放位置



============================================================================
====>>>>>具体参考CSDN博文：https://blog.csdn.net/afei__/article/details/81201039
===== Write by LaiChao 2020.01.31








